{"version":3,"sources":["utils/Dimensions.js","App.js","serviceWorker.js","index.js"],"names":["width","window","innerWidth","document","documentElement","clientWidth","body","height","innerHeight","clientHeight","Search","Input","Text","Typography","Paragraph","Title","App","React","useState","name","date","login","setData","username","setUsername","loading","setLoading","error","setError","getJoiningDate","a","fetch","headers","req","status","Error","json","data","moment","created_at","format","console","log","message","className","recycle","numberOfPieces","role","aria-label","type","addonBefore","onChange","e","target","value","placeholder","onSearch","size","spinning","code","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TAAaA,EACXC,OAAOC,YACPC,SAASC,gBAAgBC,aACzBF,SAASG,KAAKD,YAEHE,EACXN,OAAOO,aACPL,SAASC,gBAAgBK,cACzBN,SAASG,KAAKG,aCDRC,EAAWC,IAAXD,OACAE,EAA2BC,IAA3BD,KAAME,EAAqBD,IAArBC,UAAWC,EAAUF,IAAVE,MA6GVC,EA3GH,WAAO,IAAD,EACyBC,IAAMC,SAAS,CACpDC,KAAM,GACNC,KAAM,GACNC,MAAO,KAJK,0BACPF,EADO,EACPA,KAAMC,EADC,EACDA,KAAMC,EADL,EACKA,MAASC,EADd,OAMYL,IAAMC,SAAS,IAN3B,mBAMbK,EANa,KAMHC,EANG,OAOUP,IAAMC,UAAS,GAPzB,mBAObO,EAPa,KAOJC,EAPI,OAQMT,IAAMC,UAAS,GARrB,mBAQbS,EARa,KAQNC,EARM,KAWVC,EAAc,sCAAG,8BAAAC,EAAA,wDAChBP,EADgB,0CACC,GADD,cAErBG,GAAW,GACXE,GAAS,GAHY,kBAKDG,MAAM,gCAAD,OAAiCR,GAAY,CAClES,QAAS,CACP,aAAc,iBAPC,UAUA,OALbC,EALa,QAUXC,OAVW,uBAUWC,MAVX,yBAWAF,EAAIG,OAXJ,QAWbC,EAXa,OAYnBf,EAAQ,CACNH,KAAMkB,EAAKlB,KACXC,KAAMkB,IAAOD,EAAKE,YAAYC,OAAO,gBACrCnB,MAAOgB,EAAKhB,QAEdG,EAAY,IAjBO,kDAmBnBiB,QAAQC,IAAI,+BAAgC,KAAMC,SAClDrB,EAAQ,CAAEH,KAAM,GAAIC,KAAM,GAAIC,MAAO,KACrCO,GAAS,GArBU,yBAuBnBF,GAAW,GAvBQ,2EAAH,qDA2BpB,OACE,yBAAKkB,UAAU,cACXnB,GAAWL,EACX,kBAAC,IAAD,CACEyB,SAAS,EACT7C,MAAOA,EACPO,OAAQA,EACRuC,eAAgB,MAEhB,KACJ,yBAAKF,UAAU,cACb,kBAAC7B,EAAD,CAAO6B,UAAU,oBACf,0BAAMA,UAAU,UAAhB,eACA,0BAAMG,KAAK,MAAMC,aAAW,oBACzB,IADH,mCAKF,kBAACpC,EAAD,CAAMgC,UAAU,cAAhB,yBAEE,0BAAMG,KAAK,MAAMC,aAAW,UACzB,IADH,gBAFF,KASA,yBAAKJ,UAAU,oBACb,kBAAClC,EAAD,CACEuC,KAAK,OACLC,YAAY,IACZC,SAAU,SAAAC,GACR5B,EAAY4B,EAAEC,OAAOC,QAEvBA,MAAO/B,EACPgC,YAAY,gBACZC,SAAU3B,EACVe,UAAU,aAKhB,yBAAKA,UAAU,kCACb,kBAAC,IAAD,CAAMa,KAAK,QAAQC,SAAUjC,KAC3BA,GAAWL,EACX,oCACE,kBAACN,EAAD,CAAW8B,UAAU,YAAYK,KAAK,aACpC,0BAAMF,KAAK,MAAMC,aAAW,QAA5B,gBAEQ,IACP7B,GAAQE,EAJX,qBAMA,kBAACT,EAAD,CAAM+C,MAAI,EAACf,UAAU,QAClBxB,IAGHO,EACF,kBAACb,EAAD,CAAW8B,UAAU,YAAYK,KAAK,aAAtC,iBACiB,IACf,0BAAMF,KAAK,MAAMC,aAAW,SAA5B,WAIA,QCnGQY,QACW,cAA7B3D,OAAO4D,SAASC,UAEe,UAA7B7D,OAAO4D,SAASC,UAEhB7D,OAAO4D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS9D,SAAS+D,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.4c580138.chunk.js","sourcesContent":["export const width =\n  window.innerWidth ||\n  document.documentElement.clientWidth ||\n  document.body.clientWidth\n\nexport const height =\n  window.innerHeight ||\n  document.documentElement.clientHeight ||\n  document.body.clientHeight\n","import React from \"react\"\nimport { Input, Spin, Typography } from \"antd\"\nimport moment from \"moment\"\nimport \"./App.css\"\nimport Confetti from \"react-confetti\"\nimport { width, height } from \"./utils/Dimensions\"\n\nconst { Search } = Input\nconst { Text, Paragraph, Title } = Typography\n\nconst App = () => {\n  const [{ name, date, login }, setData] = React.useState({\n      name: \"\",\n      date: \"\",\n      login: \"\"\n    }),\n    [username, setUsername] = React.useState(\"\"),\n    [loading, setLoading] = React.useState(false),\n    [error, setError] = React.useState(false)\n\n  // for github user data fetching via github api\n  const getJoiningDate = async () => {\n    if (!username) return false\n    setLoading(true)\n    setError(false)\n    try {\n      const req = await fetch(`https://api.github.com/users/${username}`, {\n        headers: {\n          \"User-Agent\": \"Octocat-Day\"\n        }\n      })\n      if (req.status !== 200) throw Error\n      const data = await req.json()\n      setData({\n        name: data.name,\n        date: moment(data.created_at).format(\"DD MMMM YYYY\"),\n        login: data.login\n      })\n      setUsername(\"\")\n    } catch (error) {\n      console.log(\"TCL: getJoiningDate -> error\", error.message)\n      setData({ name: \"\", date: \"\", login: \"\" })\n      setError(true)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      {!loading && date ? (\n        <Confetti\n          recycle={false}\n          width={width}\n          height={height}\n          numberOfPieces={300}\n        />\n      ) : null}\n      <div className=\"row column\">\n        <Title className=\"header_container\">\n          <span className=\"header\">Octocat Day</span>\n          <span role=\"img\" aria-label=\"man_technologist\">\n            {\" \"}\n            üë®‚Äçüíª\n          </span>\n        </Title>\n        <Text className=\"sub_header\">\n          (GitHub user join date\n          <span role=\"img\" aria-label=\"smiley\">\n            {\" \"}\n            üòÉ\n          </span>\n          )\n        </Text>\n\n        <div className=\"search_container\">\n          <Search\n            type=\"text\"\n            addonBefore=\"@\"\n            onChange={e => {\n              setUsername(e.target.value)\n            }}\n            value={username}\n            placeholder=\"GitHub handle\"\n            onSearch={getJoiningDate}\n            className=\"search\"\n          />\n        </div>\n      </div>\n\n      <div className=\"response__container row column\">\n        <Spin size=\"large\" spinning={loading} />\n        {!loading && date ? (\n          <>\n            <Paragraph className=\"paragraph\" type=\"secondary\">\n              <span role=\"img\" aria-label=\"Tada\">\n                üéâ\n              </span>{\" \"}\n              {name || login} joined GitHub on\n            </Paragraph>\n            <Text code className=\"date\">\n              {date}\n            </Text>\n          </>\n        ) : error ? (\n          <Paragraph className=\"paragraph\" type=\"secondary\">\n            User not Found{\" \"}\n            <span role=\"img\" aria-label=\"wrong\">\n              ‚ùå\n            </span>\n          </Paragraph>\n        ) : null}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}